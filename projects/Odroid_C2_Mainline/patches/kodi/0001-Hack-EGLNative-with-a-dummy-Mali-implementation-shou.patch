From 3d95f6c825ceff637a29af1ff1ebd32b03ce661e Mon Sep 17 00:00:00 2001
From: Neil Armstrong <narmstrong@baylibre.com>
Date: Mon, 20 Mar 2017 16:37:31 +0100
Subject: [PATCH] Hack EGLNative with a dummy Mali implementation, should use
 libdrm here

---
 xbmc/windowing/egl/CMakeLists.txt        |   4 +
 xbmc/windowing/egl/EGLNativeTypeMali.cpp | 145 +++++++++++++++++++++++++++++++
 xbmc/windowing/egl/EGLNativeTypeMali.h   |  52 +++++++++++
 xbmc/windowing/egl/EGLWrapper.cpp        |   3 +
 4 files changed, 204 insertions(+)
 create mode 100644 xbmc/windowing/egl/EGLNativeTypeMali.cpp
 create mode 100644 xbmc/windowing/egl/EGLNativeTypeMali.h

diff --git a/xbmc/windowing/egl/CMakeLists.txt b/xbmc/windowing/egl/CMakeLists.txt
index 2a25e64..2bde9d8 100644
--- a/xbmc/windowing/egl/CMakeLists.txt
+++ b/xbmc/windowing/egl/CMakeLists.txt
@@ -39,6 +39,10 @@ if(IMX_FOUND)
   list(APPEND HEADERS EGLNativeTypeIMX.h)
 endif()
 
+
+list(APPEND SOURCES EGLNativeTypeMali.cpp)
+list(APPEND HEADERS EGLNativeTypeMali.h)
+
 if(SOURCES)
   core_add_library(windowing_egl)
 endif()
diff --git a/xbmc/windowing/egl/EGLNativeTypeMali.cpp b/xbmc/windowing/egl/EGLNativeTypeMali.cpp
new file mode 100644
index 0000000..0b1ca35
--- /dev/null
+++ b/xbmc/windowing/egl/EGLNativeTypeMali.cpp
@@ -0,0 +1,145 @@
+/*
+ *      Copyright (C) 2011-2013 Team XBMC
+ *      http://xbmc.org
+ *
+ *  This Program is free software; you can redistribute it and/or modify
+ *  it under the terms of the GNU General Public License as published by
+ *  the Free Software Foundation; either version 2, or (at your option)
+ *  any later version.
+ *
+ *  This Program is distributed in the hope that it will be useful,
+ *  but WITHOUT ANY WARRANTY; without even the implied warranty of
+ *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ *  GNU General Public License for more details.
+ *
+ *  You should have received a copy of the GNU General Public License
+ *  along with XBMC; see the file COPYING.  If not, see
+ *  <http://www.gnu.org/licenses/>.
+ *
+ */
+
+#include "EGLNativeTypeMali.h"
+#include "guilib/gui3d.h"
+#include "utils/StringUtils.h"
+#include "utils/SysfsUtils.h"
+#include "filesystem/SpecialProtocol.h"
+
+#include <stdio.h>
+#include <stdlib.h>
+#include <linux/fb.h>
+#include <sys/ioctl.h>
+#include <EGL/egl.h>
+
+CEGLNativeTypeMali::CEGLNativeTypeMali()
+{
+  m_nativeWindow = NULL;
+}
+
+CEGLNativeTypeMali::~CEGLNativeTypeMali()
+{
+}
+
+bool CEGLNativeTypeMali::CheckCompatibility()
+{
+	return true;
+}
+
+void CEGLNativeTypeMali::Initialize()
+{
+  return;
+}
+void CEGLNativeTypeMali::Destroy()
+{
+  return;
+}
+
+bool CEGLNativeTypeMali::CreateNativeDisplay()
+{
+  m_nativeDisplay = EGL_DEFAULT_DISPLAY;
+  return true;
+}
+
+bool CEGLNativeTypeMali::CreateNativeWindow()
+{
+#if defined(_FBDEV_WINDOW_H_)
+  fbdev_window *nativeWindow = new fbdev_window;
+  if (!nativeWindow)
+    return false;
+
+  nativeWindow->width = 1920;
+  nativeWindow->height = 1080;
+  m_nativeWindow = nativeWindow;
+
+  return true;
+#else
+  return false;
+#endif
+}
+
+bool CEGLNativeTypeMali::GetNativeDisplay(XBNativeDisplayType **nativeDisplay) const
+{
+  if (!nativeDisplay)
+    return false;
+  *nativeDisplay = (XBNativeDisplayType*) &m_nativeDisplay;
+  return true;
+}
+
+bool CEGLNativeTypeMali::GetNativeWindow(XBNativeWindowType **nativeWindow) const
+{
+  if (!nativeWindow)
+    return false;
+  *nativeWindow = (XBNativeWindowType*) &m_nativeWindow;
+  return true;
+}
+
+bool CEGLNativeTypeMali::DestroyNativeDisplay()
+{
+  return true;
+}
+
+bool CEGLNativeTypeMali::DestroyNativeWindow()
+{
+#if defined(_FBDEV_WINDOW_H_)
+  delete (fbdev_window*)m_nativeWindow, m_nativeWindow = NULL;
+#endif
+  return true;
+}
+
+bool CEGLNativeTypeMali::GetNativeResolution(RESOLUTION_INFO *res) const
+{
+  return true;
+}
+
+bool CEGLNativeTypeMali::SetNativeResolution(const RESOLUTION_INFO &res)
+{
+  return true;
+}
+
+bool CEGLNativeTypeMali::ProbeResolutions(std::vector<RESOLUTION_INFO> &resolutions)
+{
+  resolutions.clear();
+  RESOLUTION_INFO res;
+  res.iWidth = 1920;
+  res.iHeight = 1080;
+  res.iScreenWidth = 1920;
+  res.iScreenHeight= 1080;
+  res.fRefreshRate = 60;
+  res.dwFlags = D3DPRESENTFLAG_PROGRESSIVE;
+  res.iScreen       = 0;
+  res.bFullScreen = true;
+  res.iSubtitles  = (int)(0.965 * res.iHeight);
+  res.strMode = "1920x1080 @ 60fps - Full Screen";
+  resolutions.push_back(res);
+  return resolutions.size() > 0;
+
+}
+
+bool CEGLNativeTypeMali::GetPreferredResolution(RESOLUTION_INFO *res) const
+{
+  return true;
+}
+
+bool CEGLNativeTypeMali::ShowWindow(bool show)
+{
+  return true;
+}
diff --git a/xbmc/windowing/egl/EGLNativeTypeMali.h b/xbmc/windowing/egl/EGLNativeTypeMali.h
new file mode 100644
index 0000000..d925c86
--- /dev/null
+++ b/xbmc/windowing/egl/EGLNativeTypeMali.h
@@ -0,0 +1,52 @@
+#pragma once
+
+/*
+ *      Copyright (C) 2011-2013 Team XBMC
+ *      http://xbmc.org
+ *
+ *  This Program is free software; you can redistribute it and/or modify
+ *  it under the terms of the GNU General Public License as published by
+ *  the Free Software Foundation; either version 2, or (at your option)
+ *  any later version.
+ *
+ *  This Program is distributed in the hope that it will be useful,
+ *  but WITHOUT ANY WARRANTY; without even the implied warranty of
+ *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ *  GNU General Public License for more details.
+ *
+ *  You should have received a copy of the GNU General Public License
+ *  along with XBMC; see the file COPYING.  If not, see
+ *  <http://www.gnu.org/licenses/>.
+ *
+ */
+
+#include <string>
+#include <vector>
+
+#include "EGLNativeType.h"
+class CEGLNativeTypeMali : public CEGLNativeType
+{
+public:
+  CEGLNativeTypeMali();
+  virtual ~CEGLNativeTypeMali();
+  virtual std::string GetNativeName() const { return "amlogic"; };
+  virtual bool  CheckCompatibility();
+  virtual void  Initialize();
+  virtual void  Destroy();
+  virtual int   GetQuirks() { return EGL_QUIRK_NONE; };
+
+  virtual bool  CreateNativeDisplay();
+  virtual bool  CreateNativeWindow();
+  virtual bool  GetNativeDisplay(XBNativeDisplayType **nativeDisplay) const;
+  virtual bool  GetNativeWindow(XBNativeWindowType **nativeWindow) const;
+
+  virtual bool  DestroyNativeWindow();
+  virtual bool  DestroyNativeDisplay();
+
+  virtual bool  GetNativeResolution(RESOLUTION_INFO *res) const;
+  virtual bool  SetNativeResolution(const RESOLUTION_INFO &res);
+  virtual bool  ProbeResolutions(std::vector<RESOLUTION_INFO> &resolutions);
+  virtual bool  GetPreferredResolution(RESOLUTION_INFO *res) const;
+
+  virtual bool  ShowWindow(bool show);
+};
diff --git a/xbmc/windowing/egl/EGLWrapper.cpp b/xbmc/windowing/egl/EGLWrapper.cpp
index 8c6e1a1..0ff175c 100644
--- a/xbmc/windowing/egl/EGLWrapper.cpp
+++ b/xbmc/windowing/egl/EGLWrapper.cpp
@@ -34,6 +34,7 @@
 #if defined(TARGET_LINUX) && defined(HAS_LIBAMCODEC)
 #include "EGLNativeTypeAmlogic.h"
 #endif
+#include "EGLNativeTypeMali.h"
 #include "EGLWrapper.h"
 
 #define CheckError() m_result = eglGetError(); if(m_result != EGL_SUCCESS) CLog::Log(LOGERROR, "EGL error in %s: %x",__FUNCTION__, m_result);
@@ -96,6 +97,8 @@ bool CEGLWrapper::Initialize(const std::string &implementation)
       (nativeGuess = CreateEGLNativeType<CEGLNativeTypeIMX>(implementation))
 #elif defined(TARGET_LINUX) && defined(HAS_LIBAMCODEC)
       (nativeGuess = CreateEGLNativeType<CEGLNativeTypeAmlogic>(implementation))
+#else
+      (nativeGuess = CreateEGLNativeType<CEGLNativeTypeMali>(implementation))
 #endif
       )
   {
-- 
2.9.3

