From bd8248d6901bb27d1e0b19badd3ea7915b3c61ac Mon Sep 17 00:00:00 2001
From: Qiang Yu <yuq825@gmail.com>
Date: Thu, 29 Nov 2018 10:41:24 +0800
Subject: [PATCH 55/63] lima: fix gp pending uniform at wrong offset

When running glxgears, the nir uniform num is 11.
Mesa align it to 12 with some pad bytes when set
constant buffer, but gpir lower pending uniforms
(viewport transform) at offset 11.

So lima_update_gp_uniform should copy pending
uniforms to 11 instead of constant buffer size
12.

Now glxgears works!

Signed-off-by: Qiang Yu <yuq825@gmail.com>
---
 src/gallium/drivers/lima/ir/gp/nir.c    |  1 +
 src/gallium/drivers/lima/lima_context.h |  5 +++++
 src/gallium/drivers/lima/lima_draw.c    | 17 ++++++++++-------
 3 files changed, 16 insertions(+), 7 deletions(-)

diff --git a/src/gallium/drivers/lima/ir/gp/nir.c b/src/gallium/drivers/lima/ir/gp/nir.c
index bb9d9de..0c2e3c5 100644
--- a/src/gallium/drivers/lima/ir/gp/nir.c
+++ b/src/gallium/drivers/lima/ir/gp/nir.c
@@ -375,6 +375,7 @@ bool gpir_compile_nir(struct lima_vs_shader_state *prog, struct nir_shader *nir)
       return false;
 
    comp->constant_base = nir->num_uniforms;
+   prog->uniform_pending_offset = nir->num_uniforms * 16;
 
    if (!gpir_emit_cf_list(comp, &func->body))
       goto err_out0;
diff --git a/src/gallium/drivers/lima/lima_context.h b/src/gallium/drivers/lima/lima_context.h
index bfd74d7..1d6c755 100644
--- a/src/gallium/drivers/lima/lima_context.h
+++ b/src/gallium/drivers/lima/lima_context.h
@@ -72,6 +72,11 @@ struct lima_vs_shader_state {
    int shader_size;
    int prefetch;
 
+   /* pipe_constant_buffer.size is aligned with some pad bytes,
+    * so record here for the real start place of gpir lowered
+    * uniforms */
+   int uniform_pending_offset;
+
    void *constant;
    int constant_size;
 
diff --git a/src/gallium/drivers/lima/lima_draw.c b/src/gallium/drivers/lima/lima_draw.c
index 5fbc295..0ba2bf9 100644
--- a/src/gallium/drivers/lima/lima_draw.c
+++ b/src/gallium/drivers/lima/lima_draw.c
@@ -800,7 +800,7 @@ lima_pack_vs_cmd(struct lima_context *ctx, const struct pipe_draw_info *info)
       VS_CMD_ARRAYS_SEMAPHORE_BEGIN_2();
    }
 
-   int uniform_size = ctx->const_buffer[PIPE_SHADER_VERTEX].size + ctx->vs->constant_size + 32;
+   int uniform_size = ctx->vs->uniform_pending_offset + ctx->vs->constant_size + 32;
    VS_CMD_UNIFORMS_ADDRESS(
       lima_ctx_buff_va(ctx, lima_ctx_buff_gp_uniform),
       align(uniform_size, 16));
@@ -1212,24 +1212,27 @@ lima_update_gp_uniform(struct lima_context *ctx)
       ctx->const_buffer + PIPE_SHADER_VERTEX;
    struct lima_vs_shader_state *vs = ctx->vs;
 
+   int size = vs->uniform_pending_offset + vs->constant_size + 32;
    void *vs_const_buff =
-      lima_ctx_buff_alloc(ctx, lima_ctx_buff_gp_uniform,
-                          ccb->size + vs->constant_size + 32,
+      lima_ctx_buff_alloc(ctx, lima_ctx_buff_gp_uniform, size,
                           LIMA_CTX_BUFF_SUBMIT_GP, true);
 
    if (ccb->buffer)
       memcpy(vs_const_buff, ccb->buffer, ccb->size);
 
-   memcpy(vs_const_buff + ccb->size, ctx->viewport.transform.scale,
+   memcpy(vs_const_buff + vs->uniform_pending_offset,
+          ctx->viewport.transform.scale,
           sizeof(ctx->viewport.transform.scale));
-   memcpy(vs_const_buff + ccb->size + 16, ctx->viewport.transform.translate,
+   memcpy(vs_const_buff + vs->uniform_pending_offset + 16,
+          ctx->viewport.transform.translate,
           sizeof(ctx->viewport.transform.translate));
 
    if (vs->constant)
-      memcpy(vs_const_buff + ccb->size + 32, vs->constant, vs->constant_size);
+      memcpy(vs_const_buff + vs->uniform_pending_offset + 32,
+             vs->constant, vs->constant_size);
 
    lima_dump_command_stream_print(
-      vs_const_buff, ccb->size + vs->constant_size + 32, true,
+      vs_const_buff, size, true,
       "update gp uniform at va %x\n",
       lima_ctx_buff_va(ctx, lima_ctx_buff_gp_uniform));
 }
-- 
2.7.4

